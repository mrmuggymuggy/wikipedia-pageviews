# https://taskfile.dev

version: '2'

env:
  DOCKER_IMAGE: wikipedia_pageviews
  ENV: '{{default "minikube" .ENV}}'
  DOCKER_REGISTRY: '{{default "mrmuggymuggy" .DOCKER_REGISTRY}}'
  NAMESPACE: '{{default "default" .NAMESPACE}}'
  COMMIT:
    sh: git rev-parse --short HEAD

vars:
  KUBE_CONTEXT: '{{default "minikube" .KUBE_CONTEXT}}'
  HELM_CHART_NAME: wikipedia-pageviews-helm
  DEFAULT_SERVICES: |-
    wikipedia-pageviews

includes:
  dags: ./dags

tasks:

  lint:
    cmds:
      - pylint --exit-zero python

  format:
    cmds:
      - pip install pre-commit
      - pre-commit install
      - pre-commit run --all-files

  docker.build:
    cmds:
      - docker build -t $DOCKER_REGISTRY/$DOCKER_IMAGE:$COMMIT .

  jupyter:
    summary: |
      Local development with jupyter-notebook, fast feedback MVP
    cmds:
      #jupyter with latest spark
      - docker-compose up --abort-on-container-exit wikipedia_pageviews_jupyter

  local.run:
    summary: |
      Run the app locally with docker-compose
    cmds:
      - docker-compose up --abort-on-container-exit --build wikipedia_pageviews

  unit-tests:
    summary: |
      Run the unit-tests locally with docker-compose
    cmds:
      - docker-compose up --abort-on-container-exit --build wikipedia_pageviews_tests

  local.deploy:
    deps: [set.k8s.context]
    cmds:
      - |
        eval $(minikube docker-env)
        task docker:build
        task spark.helm.deploy

  start.minikube:
    cmds:
      - if minikube status | grep Running; then echo "minikube running..."; else echo "starting minikube"; minikube start; fi


  spark.helm.deploy:
    summary: |
      When run locally, you need to specify environment variables
      eg. KUBE_CONTEXT=ew1p3 NAMESPACE=data-flux ENV=prod SERVICES=k8s-spark-example task spark.helm.deploy
    deps: [set.k8s.context]
    cmds:
      - >
        {{$helm_chart_name := .HELM_CHART_NAME}}
        {{range $service := .SERVICES | trim | splitLines -}}
          helm upgrade {{$service}} {{$helm_chart_name}} \
            --namespace $NAMESPACE \
            --install \
            --atomic \
            --cleanup-on-fail \
            --force \
            --history-max 3 \
            --wait \
            --timeout 60s \
            --set-string spark_driver.image.repository=$DOCKER_REGISTRY/data/flux/$DOCKER_IMAGE \
            --set-string spark_driver.image.tag=$COMMIT \
            --values ./helm-values/{{$service}}/values-$ENV.yaml;
        {{end}}
    vars:
      SERVICES: "{{default .DEFAULT_SERVICES .SERVICES}}"

  spark.helm.template:
    deps: [set.k8s.context]
    cmds:
      - >
        {{$helm_chart_name := .HELM_CHART_NAME}}
        {{range $service := .SERVICES | trim | splitLines -}}
          helm template {{$service}} {{$helm_chart_name}} \
            --namespace $NAMESPACE \
            --set-string spark_driver.image.repository=$DOCKER_REGISTRY/data/flux/$DOCKER_IMAGE \
            --set-string spark_driver.image.tag=$COMMIT \
            --values ./helm-values/{{$service}}/values-$ENV.yaml;
        {{end}}
    vars:
      SERVICES: "{{default .DEFAULT_SERVICES .SERVICES}}"

  spark.helm.undeploy:
    summary: |
      When run locally, you need to specify environment variables
      eg. KUBE_CONTEXT=ew1p3 NAMESPACE=data-flux ENV=prod SERVICES=k8s-spark-example task spark.helm.undeploy

    deps: [set.k8s.context]
    cmds:
      - >
        {{range $service := .SERVICES | trim | splitLines -}}
          helm uninstall --namespace $NAMESPACE {{$service}}
        {{end}}
    vars:
      SERVICES: "{{default .DEFAULT_SERVICES .SERVICES}}"

  set.k8s.context:
    cmds:
      - kubectl config set-context {{.KUBE_CONTEXT}} --namespace=$NAMESPACE
      - kubectl config use-context {{.KUBE_CONTEXT}} --namespace=$NAMESPACE

  default:
    cmds:
      - echo 'executed on {{if ne .KUBE_CONTEXT "minikube"}}remote{{else}}local{{end}}'
    silent: true
